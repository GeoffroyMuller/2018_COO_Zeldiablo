@startuml
class Jeu [[java:zeldiablo.Jeu]] {
	-ArrayList<Labyrinthe> listLab
	+Jeu()
}
class Aventurier [[java:zeldiablo.Aventurier]] {
}
Jeu --> "1" Aventurier : av
class Entree [[java:zeldiablo.Entree]] {
	+Entree()
	+boolean estTraversable()
	+String getType()
}
class Case [[java:zeldiablo.Case]] {
}
Case <|-- Entree
class Vide [[java:zeldiablo.Vide]] {
	+boolean estTraversable()
	+String getType()
}
class Case [[java:zeldiablo.Case]] {
}
Case <|-- Vide
class Aventurier [[java:zeldiablo.Aventurier]] {
	-int vie
	-boolean mort
	+Aventurier()
	+Aventurier(Coordonnee c, Labyrinthe l)
	+void soigner(int pv)
	+void modifierVie(int pv)
	+void subirDegats(int pv)
	+boolean deplacerAventurier(Coordonnee c)
	+void changerCoord(Coordonnee c)
	+boolean enVie()
	+int getVie()
	+void setVie(int vie)
	+boolean isMort()
	+void setMort(boolean mort)
	+Coordonnee getCoor()
	+void setCoor(Coordonnee coor)
	+Case getCase()
}
class Coordonnee [[java:zeldiablo.Coordonnee]] {
}
Aventurier --> "1" Coordonnee : coor
class Labyrinthe [[java:zeldiablo.Labyrinthe]] {
}
Aventurier --> "1" Labyrinthe : lab
class Sortie [[java:zeldiablo.Sortie]] {
	+boolean estTraversable()
	+String getType()
}
class Case [[java:zeldiablo.Case]] {
}
Case <|-- Sortie
abstract class Case [[java:zeldiablo.Case]] {
	+Case()
	+{abstract}boolean estTraversable()
	+{abstract}String getType()
	+String toString()
}
class Coordonnee [[java:zeldiablo.Coordonnee]] {
	-int x
	-int y
	+Coordonnee(int cX, int cY)
	+int getX()
	+void setX(int x)
	+int getY()
	+void setY(int y)
}
class Mur [[java:zeldiablo.Mur]] {
	+boolean estTraversable()
	+String getType()
}
class Case [[java:zeldiablo.Case]] {
}
Case <|-- Mur
class PrincipaleTest [[java:zeldiablo.PrincipaleTest]] {
	+{static}void main(String[] args)
}
class Labyrinthe [[java:zeldiablo.Labyrinthe]] {
	-Case[][] grille
	+Labyrinthe()
	+String toString()
	+Case[][] getGrille()
}
Labyrinthe --> "*" Case : grille

@enduml